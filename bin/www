#!/usr/bin/env node

/**
 * Module dependencies.
 */
const req = require("request");

require("../dist/app")
var debug = require('debug')('telegram-bot:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 */

var timerID;

var server = http.createServer(function (request, response) {
  if (process.env.NODE_ENV === "production" && !timerID) {
    //keep awake heroku
    var hostname = request.headers.host;
    timerID = setInterval(function () {
      var date = new Date();
      console.log(date);
      if (date.getHours() >= 10 || date.getHours() <= 2) {
        http.get(hostname);
      }
    }, 15 * 60 * 1000);

    req.head(process.env.vessel_API)
  }
  response.statusCode = 307;
  process.env.tg_bot_link && response.setHeader("Location", process.env.tg_bot_link);
  response.end("It works!");
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
